{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "castDataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputDataDatset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "OutputDataDatset",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empId as short,",
				"          name as string,",
				"          gender as string,",
				"          country as string,",
				"          department as short,",
				"          Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 cast(output(",
				"          empId as integer,",
				"          name as string,",
				"          Date as date 'yyyy/MM/dd'",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 split(!isError(),",
				"     disjoint: false) ~> split1@(goodDateData, badDateData)",
				"split1@goodDateData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['goodDateData.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@badDateData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['badDateData.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}